<?php

namespace Tests\Feature;

use Illuminate\Validation\ValidationException;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\UploadedFile;
use LiliControl\tests\TestCase;
use LiliControl\tests\User;

class LiliControllerTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->registerRoutes();
    }

    private function registerRoutes()
    {
        $this->setUserRoutes();
    }

    /** @test */
    public function list_users()
    {
        $userTwo = User::create([
            'name' => "User Name",
            'email' => 'user2@lilicontrol.com',
        ]);

        $this->get('users')
            ->assertStatus(200)
            ->assertSee(auth()->user()->name)
            ->assertSee($userTwo->name)
            ->assertSee(auth()->user()->email)
            ->assertSee($userTwo->email);
    }

    /** @test */
    public function insert_new_user()
    {
        $name = "User Two";
        $this->post("user", [
            'name' => $name,
            'email' => 'user2@lilicontrol.com'
        ])->assertStatus(302);

        $this->get('users')
            ->assertStatus(200)
            ->assertSee($name);
    }

    /** @test */
    public function update_user_and_validate_fields()
    {
        $this->withoutExceptionHandling();
        $user = User::create([
            'name' => "User Name",
            'email' => 'user2@lilicontrol.com',
        ]);

        $name = "New User Name";

        $this->expectException(ValidationException::class);
        $this->put("user/{$user->id}", []);

        $this->put("user/{$user->id}", [
            'name' => $name
        ])->assertStatus(302);

        $this->get('users')
            ->assertStatus(200)
            ->assertSee($name);
    }

    /** @test */
    public function delete_user()
    {
        $name = "User Two";
        $user = User::create([
            'name' => $name,
            'email' => 'teste@lilcontrol.com'
        ]);

        $this->get('users')
            ->assertStatus(200)
            ->assertSee($name);

        $this->delete("user/{$user->id}")
            ->assertStatus(302);

        $this->get('users')
            ->assertStatus(200)
            ->assertDontSee($name);
    }

    /** @test */
    public function upload_image_file()
    {
        $this->withoutExceptionHandling();
        Storage::fake('public');

        $file = UploadedFile::fake()->image('fake_image.jpg');

        $email = 'test2@lilicontrol.com';
        $this->post(
            route('dashboard.user.store'),
            [
                'name' => "Image Post",
                'email' => $email,
                'image' => $file
            ]
        )->assertStatus(302);

        $user = User::where('email', $email)->first();

        $this->assertNotEquals(null, $user->image);

        Storage::disk('public')->assertExists($user->image);
    }
}
