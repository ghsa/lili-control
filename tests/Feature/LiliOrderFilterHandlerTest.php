<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use LiliControl\LiliOrderFilterHandler;
use LiliControl\tests\TestCase;
use LiliControl\tests\User;

class LiliOrderFilterHandlerTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUserRoutes();
    }

    /** @test */
    public function set_order_method()
    {
        $this->post('users?order=name', []);
        $orderTableHandler = new LiliOrderFilterHandler(new User());
        $this->assertEquals('name', $orderTableHandler->getOrderValue());
    }

    /** @test */
    public function set_order_direction()
    {
        $this->post('users?order=name', []);
        $orderTableHandler = new LiliOrderFilterHandler(new User());
        $this->assertEquals('desc', $orderTableHandler->getOrderDirection());
        $this->post('users?order=name', []);
        $this->assertEquals('asc', $orderTableHandler->getOrderDirection());
    }

    /** @test */
    public function apply_order_by_name()
    {
        User::create(['name' => 'Aly', 'email' => 'aly@gmail.com']);
        User::create(['name' => 'Zem', 'email' => 'john@gmail.com']);

        $query = User::query();
        $liliOrderFitlerHandler = new LiliOrderFilterHandler(new User());
        $liliOrderFitlerHandler->setOrder('name');
        $query = $liliOrderFitlerHandler->applyOrder($query);
        $users = $query->get()->toArray();
        $this->assertEquals('Aly', $users[0]['name']);

        $query = User::query();
        $liliOrderFitlerHandler = new LiliOrderFilterHandler(new User());
        $liliOrderFitlerHandler->setOrder('name', 'desc');
        $query = $liliOrderFitlerHandler->applyOrder($query);
        $users = $query->get()->toArray();
        $this->assertEquals('Zem', $users[0]['name']);
    }

}
