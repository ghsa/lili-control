<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use LiliControl\LiliFilterHandler;
use LiliControl\tests\Post;
use LiliControl\tests\TestCase;
use LiliControl\tests\User;

class LiliFilterHandlerTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUserRoutes();
    }

    /** @test */
    public function set_filters_from_request()
    {
        $this->post('users', [
            'filters' => [
                'name.like' => 'Foo',
                'age.=' => 30
            ]
        ]);
        $filterHandler = new LiliFilterHandler(new User());
        $filters = $filterHandler->getFilters();
        $this->validateFieldsExists($filters);
    }

    /** @test */
    public function add_filter_manually()
    {
        $this->post('users', [
            'filters' => [
                'name.like' => 'Foo',
            ]
        ]);
        $filterHandler = new LiliFilterHandler(new User());
        $filterHandler->addFilter('age', '=', 30);
        $filters = $filterHandler->getFilters();
        $this->validateFieldsExists($filters);
    }

    /** @test */
    public function get_field_value()
    {
        $this->post('users', [
            'filters' => [
                'name.like' => 'Foo',
            ]
        ]);
        $filterHandler = new LiliFilterHandler(new User());
        $this->assertEquals('Foo', $filterHandler->getValue('name.like'));
    }

    private function validateFieldsExists($filters)
    {
        $this->assertEquals(2, count($filters));
        $this->assertEquals('name', $filters[0]['field']);
        $this->assertEquals('like', $filters[0]['operator']);
        $this->assertEquals('Foo', $filters[0]['value']);
        $this->assertEquals('age', $filters[1]['field']);
        $this->assertEquals('=', $filters[1]['operator']);
        $this->assertEquals(30, $filters[1]['value']);
    }

    /** @test */
    public function apply_filters_and_list_users_with_lili_filter_handler()
    {
        $this->withoutExceptionHandling();
        $userOne = User::create([
            'name' => "Foo User",
            'email' => 'user2@lilicontrol.com',
        ]);
        $userTwo = User::create([
            'name' => "Bar User",
            'email' => 'user2@lilicontrol.com',
        ]);
        $this->post('users', [])
            ->assertStatus(200)
            ->assertSee($userOne->name)
            ->assertSee($userTwo->name);

        $this->post('users', [
            'filters' => [
                'name.like' => 'Foo'
            ]
        ])
            ->assertStatus(200)
            ->assertSee($userOne->name)
            ->assertDontSee($userTwo->name);

        $this->post('users', [
            'filters' => [
                'name.=' => 'Foo'
            ]
        ])
            ->assertStatus(200)
            ->assertDontSee($userOne->name)
            ->assertDontSee($userTwo->name);
    }

    /** @test */
    public function get_join_fields()
    {
        $this->post('posts', [
            'filters' => [
                'title.like' => 'Foo',
                'user[name].like' => "User"
            ]
        ]);
        $filterHandler = new LiliFilterHandler(new User());
        $filters = $filterHandler->getFilters();
        $this->assertEquals(2, count($filters));
        $this->assertEquals('title', $filters[0]['field']);
        $this->assertEquals('like', $filters[0]['operator']);
        $this->assertEquals('user[name]', $filters[1]['field']);
        $this->assertEquals('like', $filters[1]['operator']);
    }

    /** @test */
    public function search_fields_using_join()
    {
        $this->withoutExceptionHandling();
        $user = User::create([
            'name' => "John Stark",
            'email' => 'johnstart@gmail.com',
        ]);
        $post = Post::create([
            'user_id' => $user->id,
            'title' => "First Post"
        ]);

        $userTwo = User::create([
            'name' => "Mary Stark",
            'email' => 'marystart@gmail.com',
        ]);
        $post = Post::create([
            'user_id' => $userTwo->id,
            'title' => "Second Post"
        ]);

        $this->post('posts', [
            'filters' => [
                'users.email.=' => "johnstart@gmail.com"
            ]
        ])->assertStatus(200)
            ->assertSee('First Post')
            ->assertDontSee('Second Post');

        $this->post('posts', [
            'filters' => [
                'title.like' => "post"
            ]
        ])->assertStatus(200)
            ->assertSee('First Post')
            ->assertSee('Second Post');
    }

}
