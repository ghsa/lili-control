<?php

namespace LiliControl\tests;

use Illuminate\Database\Schema\Blueprint;
use LiliControl\LiliControlServiceProvider;
use Illuminate\Support\Facades\Route;

abstract class TestCase extends \Orchestra\Testbench\TestCase
{

    protected $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setUpDatabase($this->app);

        $this->actingAs($this->user);
    }

    protected function setUserRoutes()
    {
        $this->mock("App\Http\Controllers\Controller");
        Route::get('users', "LiliControl\\tests\UserController@index")->name('dashboard.user.index');
        Route::post('users', "LiliControl\\tests\UserController@index")->name('dashboard.user.search');
        Route::get('user/{id}', "LiliControl\\tests\UserController@show")->name('dashboard.user.show');
        Route::get('user/create', "LiliControl\\tests\UserController@create")->name('dashboard.user.create');
        Route::put('user/{id}', "LiliControl\\tests\UserController@update")->name('dashboard.user.update');
        Route::post('user', "LiliControl\\tests\UserController@store")->name('dashboard.user.store');
        Route::delete('user/{id}', "LiliControl\\tests\UserController@destroy")->name('dashboard.user.destroy');

        Route::get('posts', "LiliControl\\tests\PostController@index")->name('dashboard.post.index');
        Route::post('posts', "LiliControl\\tests\PostController@index")->name('dashboard.post.search');
        Route::get('post/{id}', "LiliControl\\tests\PostController@show")->name('dashboard.post.show');
        Route::get('post/create', "LiliControl\\tests\PostController@create")->name('dashboard.post.create');
        Route::put('post/{id}', "LiliControl\\tests\PostController@update")->name('dashboard.post.update');
        Route::post('post', "LiliControl\\tests\PostController@store")->name('dashboard.post.store');
        Route::delete('post/{id}', "LiliControl\\tests\PostController@destroy")->name('dashboard.post.destroy');
    }

    /**
     * @param \Illuminate\Foundation\Application $app
     *
     * @return array
     */
    protected function getPackageProviders($app)
    {
        return [
            LiliControlServiceProvider::class
        ];
    }

    protected function getEnvironmentSetUp($app)
    {
        $app['config']->set('database.default', 'sqlite');
        $app['config']->set('database.connections.sqlite', [
            'driver'   => 'sqlite',
            'database' => ':memory:',
            'prefix'   => '',
        ]);

        $app['config']->set('view.paths', [__DIR__.'/resources/views']);
    }

    protected function setUpDatabase($app)
    {
        $app['db']->connection()->getSchemaBuilder()->create('users', function (Blueprint $table) {
            $table->increments('id');
            $table->string('email');
            $table->string('name');
            $table->string('image')->nullable();
            $table->timestamps();
            $table->softDeletes();
        });

        $app['db']->connection()->getSchemaBuilder()->create('posts', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('user_id')->unsigned();
            $table->foreign('user_id')->references('id')->on('users');
            $table->string('title');
            $table->timestamps();
            $table->softDeletes();
        });

        $this->user = User::create([
            'name' => 'User Test',
            'email' => 'test@lilicontrol.com'
        ]);
    }

}
